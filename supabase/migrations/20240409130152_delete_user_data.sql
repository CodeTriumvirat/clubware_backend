create table "public"."deletion_request" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null
);


alter table "public"."deletion_request" enable row level security;

CREATE UNIQUE INDEX deletion_request_pkey ON public.deletion_request USING btree (id);

alter table "public"."deletion_request" add constraint "deletion_request_pkey" PRIMARY KEY using index "deletion_request_pkey";

alter table "public"."deletion_request" add constraint "public_deletion_request_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."deletion_request" validate constraint "public_deletion_request_user_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.delete_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
BEGIN
    -- Delete from auth.users
    DELETE FROM auth.users
    WHERE id = NEW.user_id;
    RETURN NEW;
END;
$function$
;

grant delete on table "public"."deletion_request" to "anon";

grant insert on table "public"."deletion_request" to "anon";

grant references on table "public"."deletion_request" to "anon";

grant select on table "public"."deletion_request" to "anon";

grant trigger on table "public"."deletion_request" to "anon";

grant truncate on table "public"."deletion_request" to "anon";

grant update on table "public"."deletion_request" to "anon";

grant delete on table "public"."deletion_request" to "authenticated";

grant insert on table "public"."deletion_request" to "authenticated";

grant references on table "public"."deletion_request" to "authenticated";

grant select on table "public"."deletion_request" to "authenticated";

grant trigger on table "public"."deletion_request" to "authenticated";

grant truncate on table "public"."deletion_request" to "authenticated";

grant update on table "public"."deletion_request" to "authenticated";

grant delete on table "public"."deletion_request" to "service_role";

grant insert on table "public"."deletion_request" to "service_role";

grant references on table "public"."deletion_request" to "service_role";

grant select on table "public"."deletion_request" to "service_role";

grant trigger on table "public"."deletion_request" to "service_role";

grant truncate on table "public"."deletion_request" to "service_role";

grant update on table "public"."deletion_request" to "service_role";

create policy "Enable all access for admin user"
on "public"."deletion_request"
as permissive
for all
to authenticated
using ((get_my_claim('user_role'::text) = '"admin"'::jsonb))
with check ((get_my_claim('user_role'::text) = '"admin"'::jsonb));


CREATE TRIGGER on_auth_user_deleted AFTER INSERT ON public.deletion_request FOR EACH ROW EXECUTE FUNCTION delete_user();
